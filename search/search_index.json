{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"k8s-image-swapper Mirror images into your own registry and swap image references automatically. k8s-image-swapper is a mutating webhook for Kubernetes, downloading images into your own registry and pointing the images to that new location. It is an alternative to a docker pull-through proxy . The feature set was primarily designed with Amazon ECR in mind but may work with other registries. Benefits \u00b6 Using k8s-image-swapper will improve the overall availability, reliability, durability and resiliency of your Kubernetes cluster by keeping 3 rd -party images mirrored into your own registry. k8s-image-swapper will transparently consolidate all images into a single registry without the need to adjust manifests therefore reducing the impact of external registry failures, rate limiting, network issues, change or removal of images while reducing data traffic and therefore cost. TL;DR: Protect against: external registry failure ( quay.io outage ) image pull rate limiting ( docker.io rate limits ) accidental image changes removal of images Use in air-gaped environments without the need to change manifests Reduce NAT ingress traffic/cost","title":"Home"},{"location":"index.html#benefits","text":"Using k8s-image-swapper will improve the overall availability, reliability, durability and resiliency of your Kubernetes cluster by keeping 3 rd -party images mirrored into your own registry. k8s-image-swapper will transparently consolidate all images into a single registry without the need to adjust manifests therefore reducing the impact of external registry failures, rate limiting, network issues, change or removal of images while reducing data traffic and therefore cost. TL;DR: Protect against: external registry failure ( quay.io outage ) image pull rate limiting ( docker.io rate limits ) accidental image changes removal of images Use in air-gaped environments without the need to change manifests Reduce NAT ingress traffic/cost","title":"Benefits"},{"location":"configuration.html","text":"Configuration \u00b6 The configuration is managed via the config file .k8s-image-swapper.yaml . Some options can be overriden via parameters, e.g. --dryrun . Dry Run \u00b6 The option dryRun allows to run the webhook without executing the actions, e.g. repository creation, image download and manifest mutation. Example dryRun : true Log Level & Format \u00b6 The option logLevel & logFormat allow to adjust the verbosity and format (e.g. json , console ). Example logLevel : debug logFormat : console Source \u00b6 This section configures details about the image source. Filters \u00b6 Filters provide control over what pods will be processed. By default, all pods will be processed. If a condition matches, the pod will NOT be processed. JMESPath is used as query language and allows flexible rules for most use-cases. Info The data structure used for JMESPath is as follows: Structure obj : <Object Spec> Example obj : metadata : name : static-web labels : role : myrole spec : containers : - name : web image : nginx ports : - name : web containerPort : 80 protocol : TCP Below you will find a list of common queries and/or ideas: List of common queries/ideas Do not process if namespace equals kube-system ( Helm chart default ) source : filters : - jmespath : \"obj.metadata.namespace == 'kube-system'\" Only process if namespace equals playground source : filters : - jmespath : \"obj.metadata.namespace != 'playground'\" Only process if namespace ends with -dev source : filters : - jmespath : \"ends_with(obj.metadata.namespace,'-dev')\" k8s-image-swapper will log the filter data and result in debug mode. This can be used in conjunction with JMESPath.org which has a live editor that can be used as a playground to experiment with more complex queries. Target \u00b6 This section configures details about the image target. AWS \u00b6 The option target.registry.aws holds details about the target registry storing the images. The AWS Account ID and Region is primarily used to construct the ECR domain [ACCOUNTID].dkr.ecr.[REGION].amazonaws.com . Example target : aws : accountId : 123456789 region : ap-southeast-2","title":"Configuration"},{"location":"configuration.html#configuration","text":"The configuration is managed via the config file .k8s-image-swapper.yaml . Some options can be overriden via parameters, e.g. --dryrun .","title":"Configuration"},{"location":"configuration.html#dry-run","text":"The option dryRun allows to run the webhook without executing the actions, e.g. repository creation, image download and manifest mutation. Example dryRun : true","title":"Dry Run"},{"location":"configuration.html#log-level-format","text":"The option logLevel & logFormat allow to adjust the verbosity and format (e.g. json , console ). Example logLevel : debug logFormat : console","title":"Log Level &amp; Format"},{"location":"configuration.html#source","text":"This section configures details about the image source.","title":"Source"},{"location":"configuration.html#filters","text":"Filters provide control over what pods will be processed. By default, all pods will be processed. If a condition matches, the pod will NOT be processed. JMESPath is used as query language and allows flexible rules for most use-cases. Info The data structure used for JMESPath is as follows: Structure obj : <Object Spec> Example obj : metadata : name : static-web labels : role : myrole spec : containers : - name : web image : nginx ports : - name : web containerPort : 80 protocol : TCP Below you will find a list of common queries and/or ideas: List of common queries/ideas Do not process if namespace equals kube-system ( Helm chart default ) source : filters : - jmespath : \"obj.metadata.namespace == 'kube-system'\" Only process if namespace equals playground source : filters : - jmespath : \"obj.metadata.namespace != 'playground'\" Only process if namespace ends with -dev source : filters : - jmespath : \"ends_with(obj.metadata.namespace,'-dev')\" k8s-image-swapper will log the filter data and result in debug mode. This can be used in conjunction with JMESPath.org which has a live editor that can be used as a playground to experiment with more complex queries.","title":"Filters"},{"location":"configuration.html#target","text":"This section configures details about the image target.","title":"Target"},{"location":"configuration.html#aws","text":"The option target.registry.aws holds details about the target registry storing the images. The AWS Account ID and Region is primarily used to construct the ECR domain [ACCOUNTID].dkr.ecr.[REGION].amazonaws.com . Example target : aws : accountId : 123456789 region : ap-southeast-2","title":"AWS"},{"location":"getting-started.html","text":"Getting started \u00b6 This document will provide guidance for installing k8s-image-swapper . Prerequisites \u00b6 k8s-image-swapper will automatically create image repositories and mirror images into them. This requires certain permissions for your target registry ( only AWS ECR supported atm ). Before you get started choose a namespace to install k8s-image-swapper in, e.g. operations or k8s-image-swapper . Ensure the namespace exists and is configured as your current context 1 . All examples below will omit the namespace. AWS ECR as target registry \u00b6 AWS supports a variety of authentication strategies. k8s-image-swapper uses the official Amazon AWS SDK and therefore supports all available authentication strategies . Choose from one of the strategies below or an alternative if needed. IAM credentials \u00b6 Create an IAM user (e.g. k8s-image-swapper ) with permissions 2 to create ECR repositories and upload container images. An IAM policy example can be found in the footnotes 2 . Create a Kubernetes secret (e.g. k8s-image-swapper-aws ) containing the IAM credentials you just obtained, e.g. kubectl create secret generic k8s-image-swapper-aws \\ --from-literal = aws_access_key_id = <...> \\ --from-literal = aws_secret_access_key = <...> Service Account \u00b6 TBD Helm \u00b6 Add the Helm chart repository: helm repo add estahn https://estahn.github.io/charts/ Update the local chart information: helm repo update Install k8x-image-swapper helm install k8s-image-swapper estahn/k8s-image-swapper \\ --set config.target.registry.aws.accountId=$AWS_ACCOUNT_ID \\ --set config.target.registry.aws.region=$AWS_DEFAULT_REGION \\ --set awsSecretName=k8s-image-swapper-aws Note awsSecretName is not required for the Service Account method and instead the service account is annotated: serviceAccount : create : true annotations : eks.amazonaws.com/role-arn : ${oidc_image_sawpper_role_arn} Use a tool like kubectx & kubens for convienience. \u21a9 IAM Policy { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecr:GetAuthorizationToken\" , \"ecr:DescribeRepositories\" , \"ecr:DescribeRegistry\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecr:UploadLayerPart\" , \"ecr:PutImage\" , \"ecr:ListImages\" , \"ecr:InitiateLayerUpload\" , \"ecr:GetDownloadUrlForLayer\" , \"ecr:CreateRepository\" , \"ecr:CompleteLayerUpload\" , \"ecr:BatchGetImage\" , \"ecr:BatchCheckLayerAvailability\" ], \"Resource\" : \"arn:aws:ecr:*:123456789:repository/*\" } ] } Further restricting access The resource configuration allows access to all AWS ECR repositories within the account 123456789. Restrict this further by repository name or tag. k8s-image-swapper will create repositories with the source registry as prefix, e.g. nginx \u2192 docker.io/library/nginx:latest . \u21a9 \u21a9","title":"Getting started"},{"location":"getting-started.html#getting-started","text":"This document will provide guidance for installing k8s-image-swapper .","title":"Getting started"},{"location":"getting-started.html#prerequisites","text":"k8s-image-swapper will automatically create image repositories and mirror images into them. This requires certain permissions for your target registry ( only AWS ECR supported atm ). Before you get started choose a namespace to install k8s-image-swapper in, e.g. operations or k8s-image-swapper . Ensure the namespace exists and is configured as your current context 1 . All examples below will omit the namespace.","title":"Prerequisites"},{"location":"getting-started.html#aws-ecr-as-target-registry","text":"AWS supports a variety of authentication strategies. k8s-image-swapper uses the official Amazon AWS SDK and therefore supports all available authentication strategies . Choose from one of the strategies below or an alternative if needed.","title":"AWS ECR as target registry"},{"location":"getting-started.html#iam-credentials","text":"Create an IAM user (e.g. k8s-image-swapper ) with permissions 2 to create ECR repositories and upload container images. An IAM policy example can be found in the footnotes 2 . Create a Kubernetes secret (e.g. k8s-image-swapper-aws ) containing the IAM credentials you just obtained, e.g. kubectl create secret generic k8s-image-swapper-aws \\ --from-literal = aws_access_key_id = <...> \\ --from-literal = aws_secret_access_key = <...>","title":"IAM credentials"},{"location":"getting-started.html#service-account","text":"TBD","title":"Service Account"},{"location":"getting-started.html#helm","text":"Add the Helm chart repository: helm repo add estahn https://estahn.github.io/charts/ Update the local chart information: helm repo update Install k8x-image-swapper helm install k8s-image-swapper estahn/k8s-image-swapper \\ --set config.target.registry.aws.accountId=$AWS_ACCOUNT_ID \\ --set config.target.registry.aws.region=$AWS_DEFAULT_REGION \\ --set awsSecretName=k8s-image-swapper-aws Note awsSecretName is not required for the Service Account method and instead the service account is annotated: serviceAccount : create : true annotations : eks.amazonaws.com/role-arn : ${oidc_image_sawpper_role_arn} Use a tool like kubectx & kubens for convienience. \u21a9 IAM Policy { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecr:GetAuthorizationToken\" , \"ecr:DescribeRepositories\" , \"ecr:DescribeRegistry\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecr:UploadLayerPart\" , \"ecr:PutImage\" , \"ecr:ListImages\" , \"ecr:InitiateLayerUpload\" , \"ecr:GetDownloadUrlForLayer\" , \"ecr:CreateRepository\" , \"ecr:CompleteLayerUpload\" , \"ecr:BatchGetImage\" , \"ecr:BatchCheckLayerAvailability\" ], \"Resource\" : \"arn:aws:ecr:*:123456789:repository/*\" } ] } Further restricting access The resource configuration allows access to all AWS ECR repositories within the account 123456789. Restrict this further by repository name or tag. k8s-image-swapper will create repositories with the source registry as prefix, e.g. nginx \u2192 docker.io/library/nginx:latest . \u21a9 \u21a9","title":"Helm"}]}